HTML
CSS
DOM (Document Object Model)
JavaScript


HTML

LOGO
GW-BASIC

JavaScript (ES5)

Data Types
    string, number (float), boolean, undefined, object, function
    
Programming Constructs
    var, if else, switch case, for, while, try catch finally, throw, function

APIs
    Array, Date, Math, RegEx, setInterval, clearInterval, setTimeout, clearTimeout

Unique aspects
    truthy & falsy
        0
        ''
        null
        undefined
        NaN
        false


strongly typed X loosely typed
functional
    functions are first class citizens
    function = data
static X dynamic

javascript = loosely typed, functional and dynamic language

class Employee{
    public int id;
    public string name;
}

Employee emp = new Employee();
emp.id = 1000;
emp.name = "Magesh";

emp.salary = 10000;

var obj = {}
obj.id = 100;
obj.name = 'Magesh'


Function Invocation Patterns
It doesnot matter where the function is OR who owns the function. What matters is HOW THE FUNCTION IS INVOKED!!
6 ways

1. As a method of obj
    this -> obj

2. As a function
    this -> global (window)

3. using the call method of the function
    this context can be set dynamically

4. using the apply method of function
    this context can be set dynamically

5. As an IIFE (example : closure)

6. using the 'new' keyword (for the constructor functions)




var spinner = /* ... */

spinner.up() //=> 1
spinner.up() //=> 2
spinner.up() //=> 3

spinner.down() //=> 2
spinner.down() //=> 1
spinner.down() //=> 0
spinner.down() //=> -1


spinner.counter = 10000
spinner.up()



var spinner = (function(){
    var counter = 0;

    function up(){
        return ++counter;
    }

    function down(){
        return --counter;
    }

    return {
        up : up,
        down : down
    }
})();

function spinnerFactory(){
    var counter = 0;

    function up(){
        return ++counter;
    }

    function down(){
        return --counter;
    }

    return {
        up : up,
        down : down
    }
}


constructor functions
     invoked with the 'new' keyword
        - this -> new object
        - this -> returned by default


Prototypal Inheritance
    prototype hopping


ES6 ( ECMAScript6, ES2015 )
1. let
2. const
3. array destructuring
4. rest operator (array)
5. spread operator (array)
6. object destructuring
7. rest operator (object)
8. spread operator (object)
9. object constructor
10. arrow functions
11. default arguments
12. template strings
12. class

http://es6-features.org


Angular
    Building Blocks

    Component (View)
        Presentation + UI Behavior + UI State

    Pipe
        Data transformation for presentation

    Directive
        DOM manipulation

    Service
        NON UI logic

    Module
        Registry of other application entities (components, pipes, directives, services)


TypeScript
    http://typscriptlang.org

-> Superset of JavaScript

/x & y must be numbers
function add(x,y){
    return x + y;
}

function add(x,y){
    if (typeof x !== 'number' ||  typeof y !== 'number')
        throw new Error("Invalid Arguments");
    return x + y;
}

function add(){ 
    function parseArg(n){
        if (typeof n === 'function') return parseArg(n());
        if (Array.isArray(n)) return add.apply(this, n);
        return isNaN(n) ? 0 : parseInt(n, 10);
    }
    return arguments.length <= 1 ? parseArg(arguments[0]) : parseArg(arguments[0]) + add(Array.prototype.slice.call(arguments, 1));
}

add(10,20)
add(10,'20')
add(10, 'abc')
add([10,20], [30,40])
add([10,20], [30,'40'])
add([10,20], [30,'abc'])
add([10,20], [30,['abc',40]])
add(function(){ return [10,20]; }, function(){ return [30,'abc']; })
add(10)
add()
add(10,20,30,4,50)
add([function(){ return [10,20]; }, function(){ return [30,'abc']; }])


var x : number = 10

function add(x : number, y : any) : number {
    return x + y;
}

class Employee{
    constructor(id, name, string){

    }
    display(){ 

    }
}

add(10, '20')

    |
    |
    V
    tsc
    |
    |
    V

var x = 10    
function add(x , y )  {
    return x + y;
}

function Employee(id, name, salary){
    this.id = id;
    this.name = name;
    this.salary = salary;
}
Employee.prototype.display = function(){

}

ES6
TypeScript

Annotation (Java)
Attributes (.NET)
Decorator (TS)

[Serializable]
class Employee :  {

}


@angular/cli  (node.js module)

node -v
npm install @angular/cli  -g




Chrome
Visual Studio Code (http://code.visualstudio.com)
Node.js (LTS) (http://nodejs.org)

http://freecodecamp.org

attribute directive
    that manipulates the attributes of an existing dom node
    DOES NOT change the structure of the dom tree ( by adding a new dom node or removing an existing dom node)
    enclosed by a '[]'

structural directive
    changes the structure of the dom tree ( by adding a new dom node or removing an existing dom node)
    prefixed with an '*'


SOLID Principles
    S - SRP - Single Responsibility Principle
    O - OCP - Open Closed Principle
    L - LSP - Liskov's Substitution Principle
    I - ISP - Interface Segregation Principle
    D - DIP - Dependency Inversion Principle

AGILE PRINCIPLES PATTERNS AND PRACTICES

Pure functions


function add(x,y){
    return x + y;
}

function addClient(x,y){
    var result = add(x,y);
    return result;
}

npx json-server db.json

Asynchronous Programming

Observable inverse of Enumerable
        where Enumerable = Lazy Iterable


var nos = [3,1,5,2,4];

for(let index = 0, count=nos.length; index < count; index++){
    let no = nos[index];
}

5000 products (id, name, cost, units, categories)
    first 10 stationary products whose value is less than 100
        where value = cost * units

var stationaryProducts = products.filter(p => p.category === 'stationary')
var productsWithValue = stationaryProducts.map(p => ({...p, value = p.cost * p.units}))
var productsUnder100Value = productsWithValue.filter(pv => pv.value < 100);
var first10Products = productsUnder100Value.first(10);


for(let pv100 of first10Products)

Enumerable is a collection that already has the data
    Enumerable.next() => item

Observable is a collection that will get the data in future (one after another across a timeline)
    (it doesnt have the data at present)
    Observable.onNext(observer)


Event Driven Application

employees.dat
id, name, doj, city, .... salary

open the file
count = 0, sum = 0
while (readfile){
    var data = parse(line)
    count++
    sum += data.salary
}
avg = sum / count
print avg
close the file


Rx.NET (Reactive Extensions)

Observables
Observers
    filter
    map
    reduce
    scan

@angular/common/http
    HttpClientModule
    HttpClient
